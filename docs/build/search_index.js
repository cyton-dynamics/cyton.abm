var documenterSearchIndex = {"docs":
[{"location":"#Cyton-API","page":"Cyton API","title":"Cyton API","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"These are the types and methods that implement the Cyton framework.","category":"page"},{"location":"","page":"Cyton API","title":"Cyton API","text":"See this guide for an overview: cyton-dynamics.github.io/","category":"page"},{"location":"","page":"Cyton API","title":"Cyton API","text":"CurrentModule = Cyton","category":"page"},{"location":"#Types-and-constructors","page":"Cyton API","title":"Types and constructors","text":"","category":"section"},{"location":"#Events","page":"Cyton API","title":"Events","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"CellEvent","category":"page"},{"location":"#Cyton.CellEvent","page":"Cyton API","title":"Cyton.CellEvent","text":"CellEvent\n\nTop level type for modelling cellular events.  Death and Division are handled internally but users should add additional events to model additional behaviour.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Division","category":"page"},{"location":"#Cyton.Division","page":"Cyton API","title":"Cyton.Division","text":"Division\n\nA timer (or something else) has triggered cell division\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Death","category":"page"},{"location":"#Cyton.Death","page":"Cyton API","title":"Cyton.Death","text":"Death\n\nA timer (or something else) has triggered a cell death event\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Time","category":"page"},{"location":"#Cyton.Time","page":"Cyton API","title":"Cyton.Time","text":"Time\n\nA type alias for time-like quantities. Used to make function signatures more readable\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Duration","category":"page"},{"location":"#Cyton.Duration","page":"Cyton API","title":"Cyton.Duration","text":"Duration\n\nA type alias for duration-like quantities. Used to make function signatures more readable\n\n\n\n\n\n","category":"type"},{"location":"#Cells-and-populations","page":"Cyton API","title":"Cells and populations","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"CellPopulation","category":"page"},{"location":"#Cyton.CellPopulation","page":"Cyton API","title":"Cyton.CellPopulation","text":"CellPopulation\n\nThe population of cells with convenince constructors. Ordinarily, this will be constructed by the framework.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"CellType","category":"page"},{"location":"#Cyton.CellType","page":"Cyton API","title":"Cyton.CellType","text":"CellType\n\nThis is a type (in the software sense) that a cell can carry to distinguish different categories of cell, e.g. WildType, Knockout, etc\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"GenericCell","category":"page"},{"location":"#Cyton.GenericCell","page":"Cyton API","title":"Cyton.GenericCell","text":"GenericCell\n\nA basic cell type, which is used if no more specific type is provided by the modeller. This can be used when all cells in the model are the same.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"AbstractCell{T} where T <: CellType","category":"page"},{"location":"#Cyton.AbstractCell","page":"Cyton API","title":"Cyton.AbstractCell","text":"AbstractCell\n\nThe base cell type for objects that carry individual cell state\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Cell","category":"page"},{"location":"#Cyton.Cell","page":"Cyton API","title":"Cyton.Cell","text":"Cell{T} <: AbstractCell{T}\n\nThe main user facing Cell data type. It encapsulates another  type, T, which can model concepts such as phenotype or genotype\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Cell(birth::Time)","category":"page"},{"location":"#Cyton.Cell-Tuple{Float64}","page":"Cyton API","title":"Cyton.Cell","text":"Cell(birth::Time)::Cell{GenericCell}\n\nConstructor for a generic cell.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Cell(birth::Time, cellType::T) where T <: CellType","category":"page"},{"location":"#Cyton.Cell-Union{Tuple{T}, Tuple{Float64, T}} where T<:CellType","page":"Cyton API","title":"Cyton.Cell","text":"Cell(birth::Time, cellType::T) where T <: CellType\n\nConstructor for a cell of type T\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Cell(birth::Time, divisionCount::Int64)","category":"page"},{"location":"#Cyton.Cell-Tuple{Float64, Int64}","page":"Cyton API","title":"Cyton.Cell","text":"Cell(birth::Time, divisionCount::Int64)::Cell{GenericCell}\n\nConstructor for a daughter cell (i.e. a cell with a division count)\n\n\n\n\n\n","category":"method"},{"location":"#Stimuli","page":"Cyton API","title":"Stimuli","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"Stimulus","category":"page"},{"location":"#Cyton.Stimulus","page":"Cyton API","title":"Cyton.Stimulus","text":"Stimulus\n\nTop level type for modelling cell stimuli\n\n\n\n\n\n","category":"type"},{"location":"#API-methods-and-functions","page":"Cyton API","title":"API methods and functions","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"These are the methods than need to be implemented to build a model.","category":"page"},{"location":"","page":"Cyton API","title":"Cyton API","text":"stimulate","category":"page"},{"location":"#Cyton.stimulate","page":"Cyton API","title":"Cyton.stimulate","text":"stimulute(::Cell, ::Stimulus, time::Time, Î”t::Duration)\n\nThis function is called when a stimulus is applied to a cell. This function is   overriden by the modeller to implement their required behaviour.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cyton API","title":"Cyton API","text":"step(::FateTimer, ::Time, ::Duration)","category":"page"},{"location":"#Cyton.step-Tuple{FateTimer, Float64, Float64}","page":"Cyton API","title":"Cyton.step","text":"step(::FateTimer, ::Time, ::Duration)::Union{CellEvent, Nothing}\n\nStep the FateTimer forward by one time increment. This should be implemented for each  concrete FateTimer\n\nOptionally return a CellEvent\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"inherit","category":"page"},{"location":"#Cyton.inherit","page":"Cyton API","title":"Cyton.inherit","text":"inherit(::FateTimer, ::Time)::FateTimer\n\nCalled when a cell divides, this allows daughters to inherit timers, create new timers or something in between.\n\nNote: It may be tempting to simple return the parent timer if the cell inherits the timers but be aware the stepper will called for that timer for each cell that references it.\n\n\n\n\n\n","category":"function"},{"location":"#Utility-methods","page":"Cyton API","title":"Utility methods","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"addTimer","category":"page"},{"location":"#Cyton.addTimer","page":"Cyton API","title":"Cyton.addTimer","text":"addTimer\n\nAdd a FateTimer to a cell.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cyton API","title":"Cyton API","text":"age","category":"page"},{"location":"#Cyton.age","page":"Cyton API","title":"Cyton.age","text":"age\n\nReturn the age of the cell\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cyton API","title":"Cyton API","text":"addObserver","category":"page"},{"location":"#Cyton.addObserver","page":"Cyton API","title":"Cyton.addObserver","text":"addObserver\n\nAdds a callback function,   observer(event::CellEvent, cell::Cell, time::Time),  to a cell. This function is called when Cell triggers a CellEvent.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cyton API","title":"Cyton API","text":"modelTime(model::CellPopulation)","category":"page"},{"location":"#Cyton.modelTime-Tuple{CellPopulation}","page":"Cyton API","title":"Cyton.modelTime","text":"modelTime(model::CellPopulation)::Time\n\nReturns the current model time\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"modelTimeStep(model::CellPopulation)","category":"page"},{"location":"#Cyton.modelTimeStep-Tuple{CellPopulation}","page":"Cyton API","title":"Cyton.modelTimeStep","text":"modelTimeStep(model::CellPopulation)::Duration\n\nReturns the current model time step.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"cellCount(model::CellPopulation)","category":"page"},{"location":"#Cyton.cellCount-Tuple{CellPopulation}","page":"Cyton API","title":"Cyton.cellCount","text":"cellCount(model::CellPopulation)::Int\n\nReturn the number of cells in the population\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"cohortCount(model::CellPopulation)","category":"page"},{"location":"#Cyton.cohortCount-Tuple{CellPopulation}","page":"Cyton API","title":"Cyton.cohortCount","text":"cohortCount(model::CellPopulation)::Int\n\nReturn the current cohort count, cell count normalised by generation number.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"createPopulation(nCells::Int, \n  cellFactory::Function; \n  eventCallbacks::Vector{Function}=Function[])","category":"page"},{"location":"#Cyton.createPopulation-Tuple{Int64, Function}","page":"Cyton API","title":"Cyton.createPopulation","text":"createPopulation(nCells::Int,    cellFactory::Function;    eventCallbacks::Vector{Function}=Function[])::CellPopulation\n\nCreate a population of cells:  nCells: size of starting populations  cellFactory: A function that returns constructs a new cell  eventCallbacks: Function that are called when events occurs\n\nDivision and Death are two predefined events\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"step(model::CellPopulation, stimulus::T) where T<:Stimulus","category":"page"},{"location":"#Cyton.step-Union{Tuple{T}, Tuple{CellPopulation, T}} where T<:Stimulus","page":"Cyton API","title":"Cyton.step","text":"step(model::CellPopulation, stimulus::T) where T<:Stimulus\n\nStep the population forward in time by one time step, with a single stimulus. This is called in the modeller's simulation loop.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"step(model::CellPopulation, stimuli::Vector{T}=Vector{Stimulus}()) where T<:Stimulus","category":"page"},{"location":"#Cyton.step-Union{Tuple{CellPopulation}, Tuple{T}, Tuple{CellPopulation, Vector{T}}} where T<:Stimulus","page":"Cyton API","title":"Cyton.step","text":"step(model::CellPopulation, stimuli::Vector{T}=Vector{Stimulus}()) where T<:Stimulus\n\nStep the population forward in time by one time step, with optional stimuli\n\n\n\n\n\n","category":"method"},{"location":"#Probability-distributions","page":"Cyton API","title":"Probability distributions","text":"","category":"section"},{"location":"","page":"Cyton API","title":"Cyton API","text":"DistributionParmSet","category":"page"},{"location":"#Cyton.DistributionParmSet","page":"Cyton API","title":"Cyton.DistributionParmSet","text":"DistributionParmSet\n\nA type holding parameters for a distribution.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"PoissonParms","category":"page"},{"location":"#Cyton.PoissonParms","page":"Cyton API","title":"Cyton.PoissonParms","text":"PoissonParms\n\nA Poisson distribution\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"FixedDistributionParms","category":"page"},{"location":"#Cyton.FixedDistributionParms","page":"Cyton API","title":"Cyton.FixedDistributionParms","text":"FixedDistributionParms\n\nThis distribution draws the same value every time.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"draw(d::DistributionParmSet)","category":"page"},{"location":"#Cyton.draw-Tuple{DistributionParmSet}","page":"Cyton API","title":"Cyton.draw","text":"draw(d::DistributionParmSet)\n\nReturn a random read number from the distribution.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Cyton API","title":"Cyton API","text":"usefulMax","category":"page"},{"location":"#Cyton.usefulMax","page":"Cyton API","title":"Cyton.usefulMax","text":"usefulMax\n\nReturns a hint for plotting functions.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cyton API","title":"Cyton API","text":"plotPdf","category":"page"},{"location":"#Cyton.plotPdf","page":"Cyton API","title":"Cyton.plotPdf","text":"plotPdf\n\nPlot the probability density function for this distribution.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Cyton API","title":"Cyton API","text":"NormalParms","category":"page"},{"location":"#Cyton.NormalParms","page":"Cyton API","title":"Cyton.NormalParms","text":"NormalParms\n\nA normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Cyton API","title":"Cyton API","text":"LogNormalParms","category":"page"},{"location":"#Cyton.LogNormalParms","page":"Cyton API","title":"Cyton.LogNormalParms","text":"LogNormalParms\n\nA log normal distribution parameterised as P(x mu sigma) = frac1x sigma sqrt2 pi exp(-frac(ln x - mu)^22 sigma^2)\n\n\n\n\n\n","category":"type"}]
}
